#include <windows.h>
#include <iostream>
#include <gl/gl.h>
#include <math.h>
#include <random>

#include "GLFW/glfw3.h"

float vert[] = {1, 1, 0, 1, -1, 0, -1, -1, 0, -1, 1, 0};
float Xalfa = 20;
float Zalfa = 0;
POINTFLOAT pos = {0, 0};
//float cube[] = {0, 0, 0, 1, 0, 0, 1, 0, -1, 0, 0, -1, 0, 1, -1, 1, 1, -1, 1, 1, 1, 0, 1, 0};
GLfloat cubeVertices[] = {
    // Вершины куба
    -0.5f, -0.5f, -0.5f, // 0
    0.5f, -0.5f, -0.5f, // 1
    0.5f, 0.5f, -0.5f, // 2
    -0.5f, 0.5f, -0.5f, // 3
    -0.5f, -0.5f, 1.f, // 4
    0.5f, -0.5f, 1.f, // 5
    0.5f, 0.5f, 1.f, // 6
    -0.5f, 0.5f, 1.f // 7
};

GLubyte cubeIndices[] = {
    // Индексы для отрисовки куба
    0, 1, 2, // Передняя грань
    2, 3, 0,
    4, 5, 6, // Задняя грань
    6, 7, 4,
    0, 4, 7, // Левая грань
    7, 3, 0,
    1, 5, 6, // Правая грань
    6, 2, 1,
    0, 1, 5, // Нижняя грань
    5, 4, 0,
    2, 3, 7, // Верхняя грань
    7, 6, 2
};

GLfloat squareVertices[] = {
    // Вершины квадрата
    -0.5f, -0.5f, 0.0f, // Нижний левый угол (0)
    0.5f, -0.5f, 0.0f, // Нижний правый угол (1)
    0.5f, 0.5f, 0.0f, // Верхний правый угол (2)
    -0.5f, 0.5f, 0.0f // Верхний левый угол (3)
};

float pyramid[] = {0, 0, 2, 1, 1, 0, 1, -1, 0, -1, -1, 0, -1, 1, 0, 1, 1, 0};

float randomNUM();

void drawCube(float x, float y, float z, float r, float g, float b) {
    glPushMatrix();
    glTranslatef(x, y, z);
    ///glScalef(1,1,0.5);
    glColor3f(r, g, b);
    glDrawElements(GL_TRIANGLES, sizeof(cubeIndices) / sizeof(cubeIndices[0]), GL_UNSIGNED_BYTE, cubeIndices);
    glPopMatrix();
}

void displayBigCube() {
    float red = 1;;
    float green = 0;
    float blue = 0;
    drawCube(5, 5, 4, red, green, blue);
    drawCube(6, 5, 4, red, green, blue);
    drawCube(7, 5, 4, red, green, blue);

    drawCube(5, 6, 4, red, green, blue);
    drawCube(6, 6, 4, red, green, blue);
    drawCube(7, 6, 4, red, green, blue);

    drawCube(5, 7, 4, red, green, blue);
    drawCube(6, 7, 4, red, green, blue);
    drawCube(7, 7, 4, red, green, blue);


    red = 0;
    green = 1;
    blue = 0;
    drawCube(5, 5, 5, red, green, blue);
    drawCube(6, 5, 5, red, green, blue);
    drawCube(7, 5, 5, red, green, blue);

    drawCube(5, 6, 5, red, green, blue);
    drawCube(6, 6, 5, red, green, blue);
    drawCube(7, 6, 5, red, green, blue);

    drawCube(5, 7, 5, red, green, blue);
    drawCube(6, 7, 5, red, green, blue);
    drawCube(7, 7, 5, red, green, blue);


    red = 0;
    green = 0;
    blue = 1;
    drawCube(5, 5, 6, red, green, blue);
    drawCube(6, 5, 6, red, green, blue);
    drawCube(7, 5, 6, red, green, blue);

    drawCube(5, 6, 6, red, green, blue);
    drawCube(6, 6, 6, red, green, blue);
    drawCube(7, 6, 6, red, green, blue);

    drawCube(5, 7, 6, red, green, blue);
    drawCube(6, 7, 6, red, green, blue);
    drawCube(7, 7, 6, red, green, blue);
}

void drawPlate(float x, float y, float z, float r, float g, float b) {
    glPushMatrix();
    glTranslatef(x, y, z);
    ///glScalef(1,1,0.5);
    glColor3f(r, g, b);
    glDrawElements(GL_TRIANGLES, sizeof(cubeIndices) / sizeof(cubeIndices[0]), GL_UNSIGNED_BYTE, cubeIndices);
    glPopMatrix();
}

void drawPlate() {
    glBegin(GL_TRIANGLE_FAN);
    glColor3f(0, 1, 0);
    glVertex3f(1, 1, 1);
    glVertex3f(-1, 1, 1);
    glVertex3f(-1, -1, 1);
    glVertex3f(1, -1, 1);
    glEnd();
}

void drawSquare(float x, float y, float z, float size, float r, float g, float b) {
    // Сохраните текущую матрицу модели
    glPushMatrix();

    // Переместите и масштабируйте матрицу модели для отрисовки квадрата
    glTranslatef(x, y, z);
    glScalef(size, size, size);

    // Установите цвет для квадрата
    glColor3f(r, g, b);

    // Установите указатель на массив вершин квадрата
    glVertexPointer(3, GL_FLOAT, 0, squareVertices);

    // Отрисуйте квадрат
    glDrawArrays(GL_QUADS, 0, 4);

    // Восстановите исходную матрицу модели
    glPopMatrix();
}

void drawStandingSquare1(float x, float y, float z, float size, float r, float g, float b) {
    // Сохраните текущую матрицу модели
    glPushMatrix();

    // Переместите, масштабируйте и поверните матрицу модели для отрисовки стоячего квадрата
    glTranslatef(x, y, z);
    glRotatef(90, 1.0f, 0.0f, 0.0f); // Поворот на 90 градусов вокруг оси X
    glScalef(size, size, size);

    // Установите цвет для квадрата
    glColor3f(r, g, b);

    // Установите указатель на массив вершин квадрата
    glVertexPointer(3, GL_FLOAT, 0, squareVertices);

    // Отрисуйте квадрат
    glDrawArrays(GL_QUADS, 0, 4);

    // Восстановите исходную матрицу модели
    glPopMatrix();
}

void drawStandingSquare2(float x, float y, float z, float size, float r, float g, float b) {
    // Сохраните текущую матрицу модели
    glPushMatrix();

    // Переместите, масштабируйте и поверните матрицу модели для отрисовки стоячего квадрата
    glTranslatef(x, y, z);
    glRotatef(90, 0.0f, 0.0f, 1.0f); // Поворот на 180 градусов вокруг оси Y
    glRotatef(90, 1.0f, 0.0f, 0.0f); // Поворот на 90 градусов вокруг оси X
    glScalef(size, size, size);

    // Установите цвет для квадрата
    glColor3f(r, g, b);

    // Установите указатель на массив вершин квадрата
    glVertexPointer(3, GL_FLOAT, 0, squareVertices);

    // Отрисуйте квадрат
    glDrawArrays(GL_QUADS, 0, 4);

    // Восстановите исходную матрицу модели
    glPopMatrix();
}

enum RotationAxis {
    X_AXIS,
    Y_AXIS,
    Z_AXIS
};

enum RotationDirection {
    CLOCKWISE,
    COUNTER_CLOCKWISE
};

struct Rotation {
    RotationAxis axis;
    RotationDirection direction;
    int layer;
};

Rotation currentRotation = {X_AXIS, CLOCKWISE, 0};

// сделать куб немного прозрачным
void rotateFace(RotationAxis axis, int layer, RotationDirection direction) {
    for (int i = 0; i < 9; ++i) {
        float* vertex = &cubeVertices[layer * 9 + i * 3];
        float x = vertex[0];
        float y = vertex[1];
        float z = vertex[2];

        switch (axis) {
            case X_AXIS:
                if (direction == CLOCKWISE) {
                    vertex[1] = -z;
                    vertex[2] = y;
                } else {
                    vertex[1] = z;
                    vertex[2] = -y;
                }
            break;
            case Y_AXIS:
                if (direction == CLOCKWISE) {
                    vertex[0] = z;
                    vertex[2] = -x;
                } else {
                    vertex[0] = -z;
                    vertex[2] = x;
                }
            break;
            case Z_AXIS:
                if (direction == CLOCKWISE) {
                    vertex[0] = -y;
                    vertex[1] = x;
                } else {
                    vertex[0] = y;
                    vertex[1] = -x;
                }
            break;
        }
    }
}


void drawUpSide(float z) {
    drawSquare(10, 10, z, 1, 1, 1, 0);
    drawSquare(11, 10, z, 1, 1, 1, 0);
    drawSquare(12, 10, z, 1, 1, 1, 0);

    drawSquare(10, 11, z, 1, 1, 1, 0);
    drawSquare(11, 11, z, 1, 1, 1, 0);
    drawSquare(12, 11, z, 1, 1, 1, 0);

    drawSquare(10, 12, z, 1, 1, 1, 0);
    drawSquare(11, 12, z, 1, 1, 1, 0);
    drawSquare(12, 12, z, 1, 1, 1, 0);
}

void drawDownSide() {
    drawSquare(10, 10, 3.5, 1, 1, 1, 1);
    drawSquare(11, 10, 3.5, 1, 1, 1, 1);
    drawSquare(12, 10, 3.5, 1, 1, 1, 1);

    drawSquare(10, 11, 3.5, 1, 1, 1, 1);
    drawSquare(11, 11, 3.5, 1, 1, 1, 1);
    drawSquare(12, 11, 3.5, 1, 1, 1, 1);

    drawSquare(10, 12, 3.5, 1, 1, 1, 1);
    drawSquare(11, 12, 3.5, 1, 1, 1, 1);
    drawSquare(12, 12, 3.5, 1, 1, 1, 1);
}

void drawGreenSide() {
    drawStandingSquare1(12, 12.5, 5, 1, 0, 1, 0);
    drawStandingSquare1(11, 12.5, 5, 1, 0, 1, 0);
    drawStandingSquare1(10, 12.5, 5, 1, 0, 1, 0);

    drawStandingSquare1(12, 12.5, 6, 1, 0, 1, 0);
    drawStandingSquare1(11, 12.5, 6, 1, 0, 1, 0);
    drawStandingSquare1(10, 12.5, 6, 1, 0, 1, 0);

    drawStandingSquare1(12, 12.5, 4, 1, 0, 1, 0);
    drawStandingSquare1(11, 12.5, 4, 1, 0, 1, 0);
    drawStandingSquare1(10, 12.5, 4, 1, 0, 1, 0);
}

void drawBlueSide() {
    drawStandingSquare1(12, 9.5, 5, 1, 0, 0, 1);
    drawStandingSquare1(11, 9.5, 5, 1, 0, 0, 1);
    drawStandingSquare1(10, 9.5, 5, 1, 0, 0, 1);

    drawStandingSquare1(12, 9.5, 6, 1, 0, 0, 1);
    drawStandingSquare1(11, 9.5, 6, 1, 0, 0, 1);
    drawStandingSquare1(10, 9.5, 6, 1, 0, 0, 1);

    drawStandingSquare1(12, 9.5, 4, 1, 0, 0, 1);
    drawStandingSquare1(11, 9.5, 4, 1, 0, 0, 1);
    drawStandingSquare1(10, 9.5, 4, 1, 0, 0, 1);
}

void drawPinkSide() {
    drawStandingSquare2(9.5, 10, 4, 1, 1, 0.5, 1);
    drawStandingSquare2(9.5, 11, 4, 1, 1, 0.5, 1);
    drawStandingSquare2(9.5, 12, 4, 1, 1, 0.5, 1);

    drawStandingSquare2(9.5, 10, 5, 1, 1, 0.5, 1);
    drawStandingSquare2(9.5, 11, 5, 1, 1, 0.5, 1);
    drawStandingSquare2(9.5, 12, 5, 1, 1, 0.5, 1);

    drawStandingSquare2(9.5, 10, 6, 1, 1, 0.5, 1);
    drawStandingSquare2(9.5, 11, 6, 1, 1, 0.5, 1);
    drawStandingSquare2(9.5, 12, 6, 1, 1, 0.5, 1);
}

void drawOrangeSide() {
    drawStandingSquare2(12.5, 10, 4, 1, 1, 0, 0);
    drawStandingSquare2(12.5, 11, 4, 1, 1, 0, 0);
    drawStandingSquare2(12.5, 12, 4, 1, 1, 0, 0);

    drawStandingSquare2(12.5, 10, 5, 1, 1, 0, 0);
    drawStandingSquare2(12.5, 11, 5, 1, 1, 0, 0);
    drawStandingSquare2(12.5, 12, 5, 1, 1, 0, 0);

    drawStandingSquare2(12.5, 10, 6, 1, 1, 0, 0);
    drawStandingSquare2(12.5, 11, 6, 1, 1, 0, 0);
    drawStandingSquare2(12.5, 12, 6, 1, 1, 0, 0);
}

void displayPlates() {
    drawDownSide();
    drawUpSide(6.5);
    drawGreenSide();
    drawBlueSide();
    drawPinkSide();
    drawOrangeSide();
}

void switchCentreRight() {

}

void ShowWorld() {
    glEnableClientState(GL_VERTEX_ARRAY);
    glVertexPointer(3,GL_FLOAT, 0, &vert);
    for (int i = -10; i < 10; i++)
        for (int j = -10; j < 10; j++) {
            glPushMatrix();
            if ((i + j) % 2 == 0) {
                glColor3f(0.5, 0.5, 0.5);
            } else {
                glColor3f(0, 0, 0.4);
            }
            glTranslatef(i * 2, j * 2, 0);
            glDrawArrays(GL_TRIANGLE_FAN, 0, 4);
            glPopMatrix();
        }

    glVertexPointer(3, GL_FLOAT, 0, squareVertices);
    glColor3f(1.0f, 0.0f, 0.0f); // Красный цвет
    glDrawArrays(GL_QUADS, 0, 4);

    displayPlates();

    glDisableClientState(GL_VERTEX_ARRAY);
}

void MoveCamera() {
    if (GetKeyState(VK_UP) < 0) Xalfa = ++Xalfa > 180 ? 180 : Xalfa += 5;
    if (GetKeyState(VK_DOWN) < 0) Xalfa = --Xalfa < 0 ? 0 : Xalfa -= 5;
    if (GetKeyState(VK_LEFT) < 0) Zalfa += 5;
    if (GetKeyState(VK_RIGHT) < 0) Zalfa -= 5;

    float angle = -Zalfa / 180 * M_PI;
    float speed = 0;
    if (GetKeyState('W') < 0) {
        speed = 0.15;
    }
    if (GetKeyState('S') < 0) {
        speed = -0.15;
    }
    if (GetKeyState('A') < 0) {
        speed = 0.15;
        angle -= M_PI * 0.5;
    }
    if (GetKeyState('D') < 0) {
        speed = 0.15;
        angle += M_PI * 0.5;
    }
    if (GetKeyState('Q') < 0) {
        currentRotation.axis = X_AXIS;
        currentRotation.direction = CLOCKWISE;
        currentRotation.layer = 0;
        rotateFace(currentRotation.axis, currentRotation.layer, currentRotation.direction);
    }
    if (GetKeyState('E') < 0) {
        currentRotation.axis = X_AXIS;
        currentRotation.direction = COUNTER_CLOCKWISE;
        currentRotation.layer = 2;
        rotateFace(currentRotation.axis, currentRotation.layer, currentRotation.direction);
    }
    if (speed != 0) {
        pos.x += sin(angle) * speed;
        pos.y += cos(angle) * speed;
    }

    glRotatef(-Xalfa, 1, 0, 0);
    glRotatef(-Zalfa, 0, 0, 1);
    glTranslatef(-pos.x, -pos.y, -3);
}

LRESULT CALLBACK WindowProc(HWND, UINT, WPARAM, LPARAM);

void EnableOpenGL(HWND hwnd, HDC *, HGLRC *);

void DisableOpenGL(HWND, HDC, HGLRC);


int WINAPI WinMain(HINSTANCE hInstance,
                   HINSTANCE hPrevInstance,
                   LPSTR lpCmdLine,
                   int nCmdShow) {
    WNDCLASSEX wcex;
    HWND hwnd;
    HDC hDC;
    HGLRC hRC;
    MSG msg;
    BOOL bQuit = FALSE;
    float theta = 0.0f;

    /* register window class */
    wcex.cbSize = sizeof(WNDCLASSEX);
    wcex.style = CS_OWNDC;
    wcex.lpfnWndProc = WindowProc;
    wcex.cbClsExtra = 0;
    wcex.cbWndExtra = 0;
    wcex.hInstance = hInstance;
    wcex.hIcon = LoadIcon(NULL, IDI_APPLICATION);
    wcex.hCursor = LoadCursor(NULL, IDC_ARROW);
    wcex.hbrBackground = (HBRUSH) GetStockObject(BLACK_BRUSH);
    wcex.lpszMenuName = NULL;
    wcex.lpszClassName = "GLSample";
    wcex.hIconSm = LoadIcon(NULL, IDI_APPLICATION);;


    if (!RegisterClassEx(&wcex))
        return 0;

    /* create main window */
    hwnd = CreateWindowEx(0,
                          "GLSample",
                          "OpenGL Sample",
                          WS_OVERLAPPEDWINDOW,
                          CW_USEDEFAULT,
                          CW_USEDEFAULT,
                          1280,
                          1280,
                          NULL,
                          NULL,
                          hInstance,
                          NULL);

    ShowWindow(hwnd, nCmdShow);

    /* enable OpenGL for the window */
    EnableOpenGL(hwnd, &hDC, &hRC);
    //glLoadIdentity();
    // glOrtho(-2, 2, -2, 2, -1, 1);
    glFrustum(-1, 1, -1, 1, 2, 10000);
    glEnable(GL_DEPTH_TEST);
    /* program main loop */
    while (!bQuit) {
        /* check for messages */
        if (PeekMessage(&msg, NULL, 0, 0, PM_REMOVE)) {
            /* handle or dispatch messages */
            if (msg.message == WM_QUIT) {
                bQuit = TRUE;
            } else {
                TranslateMessage(&msg);
                DispatchMessage(&msg);
            }
        } else {
            /* OpenGL animation code goes here */

            glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
            glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

            glPushMatrix();
            MoveCamera();
            ShowWorld();
            glPopMatrix();

            SwapBuffers(hDC);

            theta += 1.0f;
            Sleep(1);
        }
    }

    /* shutdown OpenGL */
    DisableOpenGL(hwnd, hDC, hRC);

    /* destroy the window explicitly */
    DestroyWindow(hwnd);

    return msg.wParam;
}

LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {
    switch (uMsg) {
        case WM_CLOSE:
            PostQuitMessage(0);
            break;

        case WM_DESTROY:
            return 0;

        case WM_KEYDOWN: {
            switch (wParam) {
                case VK_ESCAPE:
                    PostQuitMessage(0);
                    break;
            }
        }
        break;

        default:
            return DefWindowProc(hwnd, uMsg, wParam, lParam);
    }

    return 0;
}

void EnableOpenGL(HWND hwnd, HDC *hDC, HGLRC *hRC) {
    PIXELFORMATDESCRIPTOR pfd;

    int iFormat;

    /* get the device context (DC) */
    *hDC = GetDC(hwnd);

    /* set the pixel format for the DC */
    ZeroMemory(&pfd, sizeof(pfd));

    pfd.nSize = sizeof(pfd);
    pfd.nVersion = 1;
    pfd.dwFlags = PFD_DRAW_TO_WINDOW |
                  PFD_SUPPORT_OPENGL | PFD_DOUBLEBUFFER;
    pfd.iPixelType = PFD_TYPE_RGBA;
    pfd.cColorBits = 24;
    pfd.cDepthBits = 16;
    pfd.iLayerType = PFD_MAIN_PLANE;

    iFormat = ChoosePixelFormat(*hDC, &pfd);

    SetPixelFormat(*hDC, iFormat, &pfd);

    /* create and enable the render context (RC) */
    *hRC = wglCreateContext(*hDC);

    wglMakeCurrent(*hDC, *hRC);
}


void DisableOpenGL(HWND hwnd, HDC hDC, HGLRC hRC) {
    wglMakeCurrent(NULL, NULL);
    wglDeleteContext(hRC);
    ReleaseDC(hwnd, hDC);
}

float randomNUM() {
    int x = rand() % 1000;
    auto y = static_cast<float>(x);
    return y / 1000;
}

/*int main() {
    std::cout << randomNUM();
}*/
